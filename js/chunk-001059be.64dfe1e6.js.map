{"version":3,"sources":["webpack:///./src/components/Cubes/Cubes2.vue","webpack:///./src/components/Cubes/Cubes2.vue?0cae","webpack:///./src/components/Cubes/Cubes2.vue?9fae"],"names":["id","class","style","slidePosition","data","methods","canvasMove","percentage","animation","timeline","autoplay","loop","endDelay","add","targets","left","easing","duration","delay","seek","watch","innerPosition","this","props","computed","globalUnits","slideIndex","start","end","mounted","canvasContainer","document","getElementById","canvas","width","scrollWidth","height","scrollHeight","centerX","centerY","renderer","antialias","alpha","gammaFactor","powerPreference","outputEncoding","setPixelRatio","window","devicePixelRatio","setSize","camera","scene","cubeGeometry0","GreenMaterialTexture","color","cube0","cube1","cube2","rotation","x","Math","PI","y","z","position","Number","screen","availWidth","pointLight","set","light","clock0","clock1","clock2","render","requestAnimationFrame","background","setClearColor","getDelta","__scopeId"],"mappings":"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","file":"js/chunk-001059be.64dfe1e6.js","sourcesContent":["<template>\n  <div :style=\"slidePosition\" class=\"z-6 w-100 h-100\">\n    <div id=\"cubes2Green\" class=\"position-absolute\"\n      style=\"height:100vh; width:100vh;left:100%;transform:translateX(-100%)\">\n      <canvas class=\"w-full h-full\" id=\"cubes2GreenCanvas\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport anime from \"animejs\"\n//import { normalize } from \"@/utils/ranges\"\n\nimport { slidePositionParallax } from \"@/utils/slidePositioning\"\n\nimport * as THREE from \"three\"\n\nexport default {\n  data() {\n    return {}\n  },\n  methods: {\n    canvasMove(percentage) {\n      let animation = anime\n        .timeline({\n          autoplay: false,\n          loop: false,\n          endDelay: 1000\n        })\n        .add({\n          targets: \"#cubes2Green\",\n          left: [\"100%\", \"32.5%\"],\n          easing: \"easeInOutSine\",\n          duration: 500,\n          delay: 1000\n        })\n      /* var progress =\n        percentage <= 0.5 ? percentage * 2 : normalize(percentage, 0.5, 1, 1, 0)\n      animation.seek(animation.duration * progress) */\n      animation.seek(animation.duration * percentage)\n    }\n  },\n  watch: {\n    innerPosition() {\n      this.canvasMove(this.innerPosition)\n    }\n  },\n  props: [\"globalUnits\", \"slideIndex\"],\n  computed: {\n    slidePosition() {\n      //console.log(\"SLIDES INDEX\", this.slideIndex)\n      return slidePositionParallax(this.globalUnits, this.slideIndex)\n    },\n    innerPosition() {\n      return (\n        (this.globalUnits - this.slideIndex.start) /\n        (this.slideIndex.end - this.slideIndex.start)\n      )\n    }\n  },\n  mounted() {\n    const canvasContainer = document.getElementById(\"cubes2Green\")\n    const canvas = document.getElementById(\"cubes2GreenCanvas\")\n    var width = canvasContainer.scrollWidth\n    var height = canvasContainer.scrollHeight\n\n    var centerX = canvasContainer.scrollWidth / 2\n    var centerY = canvasContainer.scrollHeight / 2\n\n    var renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true,\n      gammaFactor: 2.2,\n      powerPreference: \"high-performance\",\n      outputEncoding: THREE.sRGBEncoding,\n      canvas: canvas\n    })\n    renderer.setPixelRatio(\n      window.devicePixelRatio > 2 ? 2 : window.devicePixelRatio\n    )\n    //renderer.setPixelRatio(window.devicePixelRatio)\n\n    renderer.setSize(width, height)\n\n    var scene = new THREE.Scene()\n\n    var cubeGeometry0 = new THREE.BoxBufferGeometry(\n      width / 3,\n      width / 3,\n      width / 3,\n      4,\n      4,\n      4\n    )\n\n    var GreenMaterialTexture = new THREE.MeshLambertMaterial({\n      color: 0x64ce51\n    })\n\n    var cube0 = new THREE.Mesh(cubeGeometry0, GreenMaterialTexture)\n    var cube1 = new THREE.Mesh(cubeGeometry0, GreenMaterialTexture)\n    var cube2 = new THREE.Mesh(cubeGeometry0, GreenMaterialTexture)\n\n    var camera\n    cube0.rotation.x = (Math.PI * 45) / 180\n    cube0.rotation.y = (Math.PI * 45) / 180\n    cube0.rotation.z = (Math.PI * 45) / 180\n    cube0.position.x = centerX + Number(width * 0.45)\n    cube0.position.y = centerY + Number(height * 0.35)\n    cube0.position.z = 500\n    scene.add(cube0)\n\n    cube1.rotation.x = (Math.PI * 45) / 180\n    cube1.rotation.y = (Math.PI * 45) / 180\n    cube1.rotation.z = (Math.PI * 45) / 180\n    cube1.position.x = centerX - Number(width * 0.15)\n    cube1.position.y = centerY + Number(height * 0.1)\n    cube1.position.z = 450\n    scene.add(cube1)\n\n    cube2.rotation.x = (Math.PI * 45) / 180\n    cube2.rotation.y = (Math.PI * 45) / 180\n    cube2.rotation.z = (Math.PI * 45) / 180\n\n    cube2.position.x = centerX + Number(width * 0.35)\n    cube2.position.y = centerY - Number(height * 0.75)\n    cube2.position.z = 300\n    scene.add(cube2)\n\n    camera = new THREE.PerspectiveCamera(85, width / height, 0.1, 2000)\n\n    camera.position.x = centerX\n    camera.position.y = centerY\n    /* console.log(\n      \"SCREEN AVAIL HEIGHT\",\n      window.screen.availWidth > 992,\n      window.screen.availWidth\n    ) */\n    if (window.screen.availWidth > 1280) {\n      camera.position.z = 1650\n    } else if (window.screen.availWidth > 992) {\n      camera.position.z = 1250\n    } else {\n      camera.position.z = 850\n    }\n\n    scene.add(camera)\n\n    var pointLight = new THREE.PointLight(0xdbdbdb)\n    pointLight.position.set(width / 3, height * 1.5, 1800)\n\n    scene.add(pointLight)\n\n    const light = new THREE.AmbientLight(0x686868) // soft white light\n    scene.add(light)\n\n    var clock0 = new THREE.Clock()\n    var clock1 = new THREE.Clock()\n    var clock2 = new THREE.Clock()\n\n    scene.background = null\n    function render() {\n      requestAnimationFrame(render)\n\n      scene.background = null\n      renderer.setClearColor(0xffffff, 0)\n      cube0.rotation.y -= clock0.getDelta()\n      cube1.rotation.y -= clock1.getDelta()\n      cube2.rotation.y -= clock2.getDelta()\n\n      renderer.render(scene, camera)\n    }\n\n    render()\n  },\n}\n</script>\n<style lang=\"scss\" scoped>\ncanvas {\n  width: 100%;\n  height: 100%;\n  color: #64ce51;\n}\n\n.z-99 {\n  z-index: 999;\n}\n</style>\n","import { render } from \"./Cubes2.vue?vue&type=template&id=176035b3&scoped=true\"\nimport script from \"./Cubes2.vue?vue&type=script&lang=js\"\nexport * from \"./Cubes2.vue?vue&type=script&lang=js\"\n\nimport \"./Cubes2.vue?vue&type=style&index=0&id=176035b3&lang=scss&scoped=true\"\nscript.render = render\nscript.__scopeId = \"data-v-176035b3\"\n\nexport default script","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Cubes2.vue?vue&type=style&index=0&id=176035b3&lang=scss&scoped=true\""],"sourceRoot":""}